In this lesson, you created a middleware function called asyncWrapper. Why?
Suppose that you want to make sure that both a status code and an error message 
are sent back to the user when they request the URL for a task that does not exist.
Assume that youâ€™ve created a CustomAPIError class and an error handler that 
references that class. Complete the code:

So we don't have to rewrite code, it catches errors in async functions.
and passes errors to next(), so Express can handle them properly.

const getTask = asyncWrapper(async (req, res, next) => {  
  const { id: taskID } = req.params;  
  const task = await Task.findOne({ _id: taskID });  
  if (!task) {  
        return next(createCustomError(`No task with id : ${taskID}`, 404))
  }  
  res.status(200).json({ task });  
});
